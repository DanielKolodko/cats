pipeline {
    agent any

    environment {
        // Replace "yourusername" with your Docker Hub username
        DOCKER_IMAGE = "danielkolodko/danielkolodko/working-cats"
        DOCKER_TAG = "latest"
        // Assumes you have a Jenkins credential with ID 'dockerhub' that holds your Docker Hub username and password
        DOCKERHUB_CREDENTIALS = credentials('docker')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }
        stage('Build') {
            steps {
                script {
                    echo 'Building Docker image...'
                    // Build the Docker image using the Dockerfile in the repository.
                    // The docker.build() command returns a Docker image object that can be used in later stages.
                    def app = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Running tests...'
                // Insert your test commands here. For example:
                // sh 'pytest --maxfail=1 --disable-warnings -q'
                // If you donâ€™t have tests, you can simply echo or remove this stage.
            }
        }
        stage('Push') {
            steps {
                script {
                    echo 'Pushing Docker image to Docker Hub...'
                    // Log in to Docker Hub using the stored credentials and push the image.
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        def app = docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        app.push()
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying application...'
                // Add your deployment commands here.
                // For example, you might deploy to a Kubernetes cluster, AWS ECS, or another target.
                // sh 'kubectl apply -f k8s/deployment.yml'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
