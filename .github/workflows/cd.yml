name: CD

on:
  push:
    tags:
      - 'v*'      # Trigger when pushing tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Set up GCP credentials using the service account key
      - name: Set up GCP credentials
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: onyx-seeker-451213-q9
          export_default_credentials: true

      # 3. Explicitly activate the service account (if needed)
      - name: Activate service account
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" > ${HOME}/gcloud-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-key.json
          gcloud auth list

      # 4. Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'

      # 5. Terraform Init
      - name: Terraform Init
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: terraform init

      # 6. Terraform Plan
      - name: Terraform Plan
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: terraform plan

      # 7. Terraform Apply
      - name: Terraform Apply
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: terraform apply -auto-approve

      # 8. Build the Docker image for your app
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/cat-gifs-app:latest .

      # 9. Log in to Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 10. Push the Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/cat-gifs-app:latest
      
      # Install gke-gcloud-auth-plugin so kubectl can use it
      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet
      
      # 11. Configure GKE credentials (generate kubeconfig dynamically)
      - name: Configure GKE credentials
        run: |
          gcloud container clusters get-credentials cat-gifs-cluster --region us-central1 --project onyx-seeker-451213-q9
      
      # 13. Create Docker Registry Secret for image pulling
      - name: Create Docker Registry Secret
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server="${{ secrets.DOCKER_SERVER }}" \
            --docker-username="${{ secrets.DOCKER_USERNAME }}" \
            --docker-password="${{ secrets.DOCKER_TOKEN }}" \
            --docker-email="${{ secrets.DOCKER_EMAIL }}" \
            --namespace=default || echo "Secret already exists" 

      # 12. Deploy your application to Kubernetes using your manifests
      - name: Deploy to Kubernetes
        run: |
          kubectl get nodes
          kubectl apply -f k8s/
